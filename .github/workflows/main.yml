name: Deploy HTML Bucket

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Selecione a branch para executar"
        required: true
        default: "main"

env:
  TERRAFORM_VERSION: 1.7.5
  WORKING_DIR: infra
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.terraform-output.outputs.bucket_name }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configurar autenticação GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Inicializar Terraform
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Validar configuração Terraform
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Aplicar infraestrutura Terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Obter nome do bucket
        id: terraform-output
        run: |
          BUCKET_NAME=$(terraform output -raw html_bucket_name 2>/dev/null || echo "")
          if [ -z "$BUCKET_NAME" ]; then
            echo "Erro: Não foi possível obter o nome do bucket"
            exit 1
          fi
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "Bucket criado: $BUCKET_NAME"
        working-directory: ${{ env.WORKING_DIR }}

  deploy-content:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configurar autenticação GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Verificar se arquivo existe
        run: |
          if [ ! -f "../calculadora/index.html" ]; then
            echo "❌ Arquivo index.html não encontrado!"
            ls -la ../calculadora/
            exit 1
          fi
          echo "✅ Arquivo index.html encontrado"

      - name: Copiar arquivos para o bucket
        run: |
          gsutil cp ../calculadora/index.html gs://${{ needs.setup.outputs.bucket_name }}/index.html
          gsutil acl ch -u AllUsers:R gs://${{ needs.setup.outputs.bucket_name }}/index.html
          echo "✅ Arquivo copiado com sucesso para o bucket: ${{ needs.setup.outputs.bucket_name }}"

  notify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-content]
    if: always()
    steps:
      - name: Notificar sucesso no Discord
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content": "✅ Deploy do bucket HTML realizado com sucesso! Bucket: ${{ needs.setup.outputs.bucket_name }}"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notificar falha no Discord
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content": "❌ Falha no deploy do bucket HTML. Verifique a pipeline no GitHub Actions."}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
